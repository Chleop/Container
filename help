Hello !
Alors du coup quelques conseils pour container :

1. Utiliser les sites de référence :
* https://cplusplus.com/reference/stl/
* https://en.cppreference.com/w/cpp/container

**2. Utiliser les bons concepts au bon moment :**
* Les allocators : c'est assez basique sur le Vector (c'est un peu plus poussé avec Map). De ce que j'ai compris ca permet plusieurs choses : Ca permet de faire l'allocation de mémoire et la construction d'un objet en deux temps (alors qu'avec "New" tu alloue de la mémoire et tu construit l'objet en même temps). Ca permet aussi d'allouer et de désallouer de la mémoire pour un type particulier (sans répréciser le type à chaque fois).
* Les "Iterator traits" sont utiles au moment ou tu voudra faire les itérateurs sur Vector : ca va beauuuuucoup te simplifier la tâche
* Le "Enable If" associé au "Is Integral" te permettra de distinguer des spécialisations de fonction : lorsque certaines fonctions ont plusieurs prototypes pour une même fonction membre (exemple : la fonction insert sur Vector nécessite un "Enable if"
* Le "reverse Iterator" : A faire sur Vector, et normalement tu peux le réutiliser sans changer le code pour Map
* Le "Pair" et "Make Pair" : A faire sur Map
* Le "Equal" et "Lexicographical compare" vont te servir lorsque tu fera les opérateurs relationnels sur Vector.

**3. Ne pas passer trop de temps sur des trucs inutiles**
* Les itérateurs sur Vector : on peut faire un typedef sur un pointeur, c'est largement suffisant et un pointeur a déjà toutes les bonnes propriétés (addition, comparaison de pointeurs, etc ...)
* Ne pas forcément faire de TPP : tu as beaucoup de fonctions qui se font en une ou quelques lignes, ca vaut plus le coup de les faire directement dans le .hpp, tu perdra moins de temps à remettre les prototypes

**4. Faire beaucoup de petits tests régulièrement pour valider que tes fonctions font bien ce qu'il faut**
* Tu va développer beaucoup de fonction, et si tu fais un main.cpp pour les tester il va vite être énorme. Beaucoup de gens créent ou utilisent un framework de test pour valider leurs fonctions.
* Personnellement j'utiliser Google Test qui est un framework de test pour CPP, je pourrais t'aider à mettre tes premiers tests en place si tu veux
* Il faudra quasiment toujours comparer tes fonctions avec les fonctions des containers standard, prévoir de faire ça facilement dans les tests.
